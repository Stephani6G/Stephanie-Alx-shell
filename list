#include "shell.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/**
 * list_to_strings - returns an array of strings from a linked list
 * @head: pointer to the first node
 *
 * Return: array of strings or NULL on failure
 */
char **list_to_strings(list_t *head)
{
    size_t count = 0;
    list_t *current = head;

    // Count the number of nodes in the list
    while (current)
    {
        count++;
        current = current->next;
    }

    if (count == 0)
        return NULL;

    char **strs = (char **)malloc(sizeof(char *) * (count + 1));
    if (!strs)
        return NULL;

    for (size_t i = 0; i < count; i++)
    {
        strs[i] = strdup(current->str ? current->str : "(nil)");
        if (!strs[i])
        {
            for (size_t j = 0; j < i; j++)
                free(strs[j]);
            free(strs);
            return NULL;
        }
        current = current->next;
    }

    strs[count] = NULL;
    return strs;
}

/**
 * print_list - prints all elements of a list_t linked list
 * @h: pointer to the first node
 *
 * Return: number of nodes in the list
 */
size_t print_list(const list_t *h)
{
    size_t count = 0;

    while (h)
    {
        printf("%d: %s\n", h->num, h->str ? h->str : "(nil)");
        h = h->next;
        count++;
    }

    return count;
}

/**
 * node_starts_with - returns the node whose string starts with the given prefix
 * @node: pointer to the list head
 * @prefix: string to match
 * @c: the character to match after the prefix
 *
 * Return: matching node or NULL
 */
list_t *node_starts_with(list_t *node, const char *prefix, char c)
{
    while (node)
    {
        if (strstr(node->str, prefix) == node->str && (c == -1 || node->str[strlen(prefix)] == c))
            return node;
        node = node->next;
    }

    return NULL;
}

/**
 * get_node_index - gets the index of a node in the list
 * @head: pointer to the list head
 * @node: pointer to the node
 *
 * Return: index of the node or -1 if not found
 */
ssize_t get_node_index(list_t *head, list_t *node)
{
    size_t index = 0;

    while (head)
    {
        if (head == node)
            return index;
        head = head->next;
        index++;
    }

    return -1;
}

